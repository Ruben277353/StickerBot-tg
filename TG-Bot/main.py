import json
from PIL import Image
import os
import shutil
from pathlib import Path
import string
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.keys import Keys
import time
import random
import asyncio
import logging
import sqlite3
import pyautogui
from webdriver_manager.chrome import ChromeDriverManager  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–∞

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = '7889127081:AAFfxysWqHdHRioKcNSAjvbnCcbzFp44ryk'  # –í–∞—à —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
CHROME_PROFILE_PATH = r'C:\Users\WoW\AppData\Local\Google\Chrome\SeleniumProfile'  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
SAVE_FOLDER = "telegram_stickers"  # –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–æ–≤
WHATSAPP_CONTACT = "sd"  # –ò–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞/–≥—Ä—É–ø–ø—ã –≤ WhatsApp
DATABASE_PATH = "stickers.db"  # –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–ø–æ–∫
os.makedirs(SAVE_FOLDER, exist_ok=True)
os.makedirs(CHROME_PROFILE_PATH, exist_ok=True)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –¥—Ä–∞–π–≤–µ—Ä–∞
driver = None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Selenium WebDriver –¥–ª—è WhatsApp
def init_whatsapp_driver():
    chrome_options = Options()
    chrome_options.add_argument(f"--user-data-dir={CHROME_PROFILE_PATH}")
    chrome_options.add_argument("--profile-directory=Default")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--remote-allow-origins=*")
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--remote-debugging-port=9222")
    chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º webdriver_manager –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥—Ä–∞–π–≤–µ—Ä–∞
    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service, options=chrome_options)
    return driver

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_database():
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS stickers (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            file_id TEXT NOT NULL,
            file_path TEXT NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    conn.commit()
    conn.close()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def add_sticker_to_db(file_id, file_path):
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO stickers (file_id, file_path) VALUES (?, ?)
    ''', (file_id, file_path))
    conn.commit()
    conn.close()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def process_image(input_path):
    output_path = os.path.join(SAVE_FOLDER, f"processed_{os.path.basename(input_path)}")
    with Image.open(input_path) as img:
        img = img.resize((512, 512), Image.Resampling.LANCZOS)
        if img.mode != 'RGB':
            img = img.convert('RGB')
        img.save(output_path, "WEBP", quality=90)
    return output_path

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∏–∫–µ—Ä–∞ –≤ WhatsApp
def send_to_whatsapp(image_path):
    global driver
    try:
        if driver is None:
            driver = init_whatsapp_driver()
            driver.get("https://web.whatsapp.com")
            time.sleep(20)  # –û–∂–∏–¥–∞–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR-–∫–æ–¥–∞

        # –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        search_box = WebDriverWait(driver, 30).until(
            EC.presence_of_element_located((By.XPATH, '//div[@contenteditable="true"][@data-tab="3"]'))
        )
        search_box.send_keys(WHATSAPP_CONTACT)
        time.sleep(2)
        search_box.send_keys(Keys.ENTER)
        time.sleep(2)

        # –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–∞
        attach_button = WebDriverWait(driver, 30).until(
            EC.presence_of_element_located((By.XPATH, '//div[@title="–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å"]')))
        attach_button.click()
        time.sleep(1)

        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_input = driver.find_element(By.XPATH, '//input[@accept="image/*,video/mp4,video/3gpp,video/quicktime"]')
        image_input.send_keys(os.path.abspath(image_path))
        time.sleep(2)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∏–∫–µ—Ä–∞
        send_button = driver.find_element(By.XPATH, '//span[@data-icon="send"]')
        send_button.click()
        time.sleep(2)

        logger.info("–°—Ç–∏–∫–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ WhatsApp.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ WhatsApp: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∏–∫–µ—Ä–æ–≤ Telegram
async def handle_sticker(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        sticker = update.message.sticker
        file = await context.bot.get_file(sticker.file_id)

        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ
        original_path = os.path.join(SAVE_FOLDER, f"original_{sticker.file_id}.webp")
        await file.download_to_drive(original_path)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞
        processed_path = process_image(original_path)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        add_sticker_to_db(sticker.file_id, processed_path)
        logger.info(f"–°—Ç–∏–∫–µ—Ä {sticker.file_id} —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ WhatsApp
        await update.message.reply_text("‚úÖ –°—Ç–∏–∫–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∞–Ω! –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ WhatsApp...")
        await asyncio.to_thread(send_to_whatsapp, processed_path)

        # –û—á–∏—Å—Ç–∫–∞
        os.remove(original_path)
        os.remove(processed_path)

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üöÄ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Ç–∏–∫–µ—Ä, –∏ —è:\n"
        "1. –°–∫–∞—á–∞—é –µ–≥–æ\n"
        "2. –ò–∑–º–µ–Ω—é —Ä–∞–∑–º–µ—Ä –¥–æ 512x512\n"
        "3. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—é –≤ WhatsApp!"
    )

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def main():
    global driver
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        init_database()

        application = Application.builder().token(TELEGRAM_TOKEN).build()

        application.add_handler(CommandHandler("start", start))
        application.add_handler(MessageHandler(filters.Sticker.ALL, handle_sticker))

        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        application.run_polling()

    finally:
        if driver is not None:
            logger.info("–ó–∞–∫—Ä—ã—Ç–∏–µ –¥—Ä–∞–π–≤–µ—Ä–∞...")
            driver.quit()

if __name__ == '__main__':
    main()